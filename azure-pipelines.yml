trigger:
  - none

pool:
  vmImage: 'ubuntu-latest'

variables:
  environment: 'stage' # Change to 'staging' or 'prod' for other environments
  workingdir: '$(Build.SourcesDirectory)/Infra-Terraform-IAC/environments/stage'

stages:  
- stage: PlanStage
  displayName: 'Terraform Plan'
  jobs:
  - job: TerraformPlanJob
    displayName: 'Terraform Deployment'
    steps:
    - task: TerraformTaskV3@3
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(workingdir)'
        backendServiceArm: ''
        backendAzureRmResourceGroupName: 'tfstate-rg'
        backendAzureRmStorageAccountName: 'backendstrg'
        backendAzureRmContainerName: 'stagebackendstate'
        backendAzureRmKey: 'stage.tfstate'

    - task: TerraformTaskV3@3
      displayName: 'Terraform Validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(workingdir)'

    - script: |
        ls -al $(Build.SourcesDirectory)
      displayName: 'List Files in Sources Directory'

    - task: TerraformTaskV3@3
      displayName: 'Terraform plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(workingdir)'
        commandOptions: '-var-file="./stage.tfvars"'
        environmentServiceNameAzureRM: ''

- stage: ApplyStage
  displayName: 'Terraform Apply'
  jobs:
  - job: waitForValidation
    displayName: Wait for pipeline validation
    pool: server
    timeoutInMinutes: 4320 # job times out in 3 days
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 1440 # task times out in 1 day
      inputs:
        notifyUsers: ''
        instructions: 'Please validate the build $(Build.BuildId) configuration and resume'
        onTimeout: 'resume'

  - job: deployAzure
    displayName: deploy infra
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn: [waitForValidation]
    steps:
    - task: TerraformTaskV3@3
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(workingdir)'
        backendServiceArm: ''
        backendAzureRmResourceGroupName: 'tfstate-rg'
        backendAzureRmStorageAccountName: 'backendstrg'
        backendAzureRmContainerName: 'stagebackendstate'
        backendAzureRmKey: 'stage.tfstate'

    - task: TerraformTaskV3@3
      displayName: 'Terraform plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(workingdir)'
        commandOptions: ''


    - task: TerraformTaskV3@3
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(workingdir)'
        commandOptions: '-var-file="./stage.tfvars"'
        environmentServiceNameAzureRM: ''

- stage: Destroy
  displayName: 'Terraform Destroy'
  jobs:
  - job: waitForValidation
    displayName: Wait for external validation
    pool: server
    timeoutInMinutes: 4320 # job times out in 3 days
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 1440 # task times out in 1 day
      inputs:
        notifyUsers: ''
        instructions: 'Please validate the build $(Build.BuildId) configuration and resume'
        onTimeout: 'resume'

  - job: destroyinfra
    displayName: infra destroy
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn: [waitForValidation]
    steps:
    - task: TerraformTaskV3@3
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(workingdir)'
        backendServiceArm: ''
        backendAzureRmResourceGroupName: 'tfstate-rg'
        backendAzureRmStorageAccountName: 'backendstrg'
        backendAzureRmContainerName: 'stagebackendstate'
        backendAzureRmKey: 'stage.tfstate'

    - task: TerraformTaskV3@3
      displayName: 'Terraform plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(workingdir)'
        commandOptions: '-var-file="./stage.tfvars"'
        environmentServiceNameAzureRM: ''


    - task: TerraformTaskV3@3
      displayName: 'Terraform Destroy'
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: '$(workingdir)'
        commandOptions: '-var-file="./stage.tfvars"'
        environmentServiceNameAzureRM: ''